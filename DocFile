FROM ubuntu:20.04
#contact maintainer for any issues 
MAINTAINER "Abdul Raheem" <abdul@x.com>


LABEL name="Docker build for TFNR-Automation using the robot framework"

# Ensures python output is set straight to the terminal without buffering it first
ENV PYTHONUNBUFFERED 1

# Setting the workdir as environment
ENV workdir /app

# Setting Sauce Connect version as variable
ARG SC_VERSION=4.5.4

# Adding Jython related variables and environment variables
ARG JYTHON_VERSION=2.7.2
ARG JYTHON_HOME=/opt/jython-$JYTHON_VERSION

ENV JYTHON_VERSION=$JYTHON_VERSION
ENV JYTHON_HOME=$JYTHON_HOME
ENV PATH=$PATH:$JYTHON_HOME/bin

# Create root directory for our project in the container
RUN mkdir -p /app/sauce-connect

# Set the working directory to /app
WORKDIR ${workdir}
# Install wget and Cron
RUN  apt-get update \
  && apt-get install -y wget \
  && apt-get install -y cron \
  && apt-get install -y default-jre

# Installing Jython
RUN wget -cO jython-installer.jar "http://search.maven.org/remotecontent?filepath=org/python/jython-installer/$JYTHON_VERSION/jython-installer-$JYTHON_VERSION.jar" && \
    java -jar jython-installer.jar -s -d "$JYTHON_HOME" -t standard -e demo doc -i src && \
    rm -fr "$JYTHON_HOME"/Docs "$JYTHON_HOME"/Demo "$JYTHON_HOME"/tests && \
    rm -f jython-installer.jar && \
    ln -sfv "$JYTHON_HOME/bin/"* /usr/local/bin/

# Copy the current directory contents into the container at /app
#ADD . /app/

# Downloading Sauce connect
#RUN wget https://saucelabs.com/downloads/sc-$SC_VERSION-linux.tar.gz -O - | tar -xz -C /app/sauce-connect/
#RUN chmod -R a+x /app/sauce-connect/sc-$SC_VERSION-linux && chown -R root:root /app/sauce-connect/sc-$SC_VERSION-linux

# Setting the variable SC to sauce-connect working directory
RUN export SC=$workdir

RUN apt-get install python3.7 --assume-yes
RUN apt-get install --quiet --assume-yes python3-pip vim unzip net-tools gir1.2-gdkpixbuf-2.0 gir1.2-gdkpixbuf-2.0 libaio1 python3-gi gobject-introspection gir1.2-gtk-3.0 \
    && python3 -m pip install --upgrade pip setuptools wheel

RUN apt install --assume-yes libcairo2-dev pkg-config python3-dev
ADD python3requirements.txt jythonrequirements.txt ./
# Install pipenv, generate requirements.txt from Pipfile and install pip packages
RUN python3 -m pip install pipenv \
     && python3 -m pip install -r python3requirements.txt

RUN jython -m ensurepip \ 
    && jython -m pip install -r jythonrequirements.txt

RUN wget --no-verbose https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
RUN dpkg --install google-chrome-stable_current_amd64.deb; apt-get --fix-broken --assume-yes install
RUN CHROMEDRIVER_VERSION=`wget --no-verbose --output-document - https://chromedriver.storage.googleapis.com/LATEST_RELEASE` && \
    wget --no-verbose --output-document /tmp/chromedriver_linux64.zip http://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_linux64.zip && \
    unzip -qq /tmp/chromedriver_linux64.zip -d /opt/chromedriver && \
    chmod +x /opt/chromedriver/chromedriver && \
    ln -fs /opt/chromedriver/chromedriver /usr/local/bin/chromedriver

# Downloading Sauce connect
RUN mkdir /opt/sauce-connect && wget https://saucelabs.com/downloads/sc-$SC_VERSION-linux.tar.gz -O - | tar -xz -C /opt/sauce-connect/
RUN chmod -R a+x /opt/sauce-connect/sc-$SC_VERSION-linux && chown -R root:root /opt/sauce-connect/sc-$SC_VERSION-linux

# Downloading Oracle client
RUN mkdir /opt/oracle &&  wget -O /tmp/insta.zip https://download.oracle.com/otn_software/linux/instantclient/199000/instantclient-basic-linux.x64-19.9.0.0.0dbru.zip \
    && unzip '/tmp/insta.zip' -d /opt/oracle && rm /tmp/insta.zip || true;
RUN   echo "export LD_LIBRARY_PATH=/opt/oracle/instantclient_19_9:$LD_LIBRARY_PATH" >> ~/.bashrc && /bin/bash -c "source ~/.bashrc"
# Copy the current directory contents into the container at /app
#ADD . /app/
#RUN GECKODRIVER_VERSION=`wget --no-verbose --output-document - https://api.github.com/repos/mozilla/geckodriver/releases/latest | grep tag_name | cut -d '"' -f 4` && \
#    wget --no-verbose --output-document /tmp/geckodriver.tar.gz https://github.com/mozilla/geckodriver/releases/download/$GECKODRIVER_VERSION/geckodriver-$GECKODRIVER_VERSION-linux64.tar.gz && \
 #   tar --directory /opt -zxf /tmp/geckodriver.tar.gz && \
  #  chmod +x /opt/geckodriver && \
  #  ln -fs /opt/geckodriver /usr/local/bin/geckodriver
COPY ./sauce-connect/createSCTunnels.sh /app/sauce-connect/createSCTunnels.sh
RUN chmod -R a+x /app/sauce-connect/createSCTunnels.sh
ENTRYPOINT ["/bin/bash"]




==


packr..tablu.json
{
  "builders": [
      {
        "type": "amazon-ebs",
        "ami_name": "Tableau-packer-{{isotime \"02-Jan-06 03_04_05\" | clean_resource_name}}",
        "region": "{{user `aws_region`}}",
        "ami_regions": ["us-east-1"],
        "instance_type": "{{ user `instance_type`}}",
        "encrypt_boot": true,
        "source_ami_filter": {
          "filters": {
            "virtualization-type": "hvm",
            "name": "amzn2-ami-hvm-2.0.*-x86_64-gp2",
            "root-device-type": "ebs"
          },
          "owners": ["amazon"],
          "most_recent": true
        },
        "ssh_username": "ec2-user",
        "vpc_id": "{{user `vpc_id`}}",
        "subnet_id": "{{user `subnet_id`}}",
        "associate_public_ip_address": true,
        "tags": {
          "Name": "Tableau-Golden-Image", 
          "OS_Version": "Amazon Linux 2",
          "Base_AMI_Name": "{{ .SourceAMIName }}"
        },
        "run_tags": {
          "Name": "tableau-packer"
        },
      "launch_block_device_mappings": [
        {
          "device_name": "/dev/xvda",
          "volume_size": 60,
          "volume_type": "gp2",
          "delete_on_termination": true
        }
      ]
    }],   
  "provisioners": [
    {
      "type": "shell",
      "inline": [
        "lsblk",
        "df -h"
      ]
    }, 
    {
      "type": "shell",
      "script": "tableau_base_install.sh"
    }
   
  ],
    "post-processors": [
      {
        "type": "manifest",
        "output": "manifest.json",
        "strip_path": true
      }
    ]        
}


==

tabinstallscrip.

#!/bin/bash

#[Primary Server]
sudo yum -y update
sudo yum  -y install fontconfig fuse gdb chrpath freeglut fuse-libs libXcomposite libXcursor libXi libXrandr libXrender libxslt libXtst mesa-libEGL

# Downloading Tableau 
wget https://downloads.tableau.com/tssoftware/tableau-server-2020-4-0.x86_64.rpm
sudo yum  -y install tableau-server-2020-4-0.x86_64.rpm
sudo useradd tadmin
echo -e "tableau@123\ntableau@123" | sudo passwd tadmin

# Downloading Postgres for Tableau
wget https://downloads.tableau.com/drivers/linux/yum/tableau-driver/tableau-postgresql-odbc-09.06.0500-1.x86_64.rpm
sudo yum  -y install tableau-postgresql-odbc-09.06.0500-1.x86_64.rpm

# Downloading Oracle for Tableau
wget https://downloads.tableau.com/drivers/linux/yum/tableau-driver/tableau-oracle-12.1.0.2.0-1.x86_64.rpm
sudo yum -y install tableau-oracle-12.1.0.2.0-1.x86_64.rpm

# Installing DataDog Agent
sudo DD_AGENT_MAJOR_VERSION=7 DD_API_KEY=086685fd6 DD_SITE="datadoghq.com" bash -c "$(curl -L https://s3.amazonaws.com/dd-agent/scripts/install_script.sh)"


var.sjon

{
  "aws_access_key": "${AWS_ACCESS_KEY_ID}",
  "aws_secret_key": "${AWS_SECRET_ACCESS_KEY}",
  "aws_region": "us-east-1",
  "vpc_id": "vpc-7d5cd1",
  "subnet_id": "subnet-08b006", 
  "ami_name": "Tableau-AMZN-{{isotime \"02-Jan-06 03_04_05\"}}",
  "instance_type": "m5.4xlarge"
}



penta baseinstall

!/bin/bash

sudo yum -y update
# Install needed Java version
sudo yum -y install java-11-amazon-corretto-headless
java -version

# Create Pentaho user
sudo useradd pentaho
sudo usermod -aG wheel pentaho

# Download and Install Pentaho
whoami
sudo -i -u pentaho bash << EOF
echo "In"
whoami
cd /home/pentaho
wget https://phoenixnap.dl.sourceforge.net/project/pentaho/Pentaho%209.1/server/pentaho-server-ce-9.1.0.0-324.zip
unzip pentaho-server-ce-9.1.0.0-324.zip 
EOF
echo "Out"
whoami

whoami
sudo -i -u ec2-user bash << EOF
ls /tmp/
sudo cp /tmp/pentaho.service /etc/systemd/system/pentaho.service
sudo systemctl enable pentaho.service
sudo systemctl daemon-reload
EOF
echo "Out"
whoami


pentapacket.json
{
  "builders": [
      {
        "type": "amazon-ebs",
        "ami_name": "Pentaho-packer-{{isotime \"02-Jan-06 03_04_05\" | clean_resource_name}}",
        "region": "{{user `aws_region`}}",
        "ami_regions": ["us-east-1"],
        "instance_type": "{{ user `instance_type`}}",
        "encrypt_boot": true,
        "source_ami_filter": {
          "filters": {
            "virtualization-type": "hvm",
            "name": "amzn2-ami-hvm-2.0.*-x86_64-gp2",
            "root-device-type": "ebs"
          },
          "owners": ["amazon"],
          "most_recent": true
        },
        "ssh_username": "ec2-user",
        "vpc_id": "{{user `vpc_id`}}",
        "subnet_id": "{{user `subnet_id`}}",
        "associate_public_ip_address": true,
        "tags": {
          "Name": "Pentaho-Golden-Image", 
          "OS_Version": "Amazon Linux 2",
          "Base_AMI_Name": "{{ .SourceAMIName }}"
        },
        "run_tags": {
          "Name": "pentaho-packer"
        },
      "launch_block_device_mappings": [
        {
          "device_name": "/dev/xvda",
          "volume_size": 50,
          "volume_type": "gp2",
          "delete_on_termination": true
        }
      ]
    }],   
  "provisioners": [
    {
      "type": "shell",
      "inline": [
        "lsblk",
        "df -h"
      ]
    }, 
    {
      "type": "file",
      "source": "pentaho.service",
      "destination": "/tmp/pentaho.service"
    },
    {
      "type": "shell",
      "script": "pentaho_base_install.sh"
    }
  ],
    "post-processors": [
      {
        "type": "manifest",
        "output": "manifest.json",
        "strip_path": true
      }
    ]        
}

{
  "aws_access_key": "${AWS_ACCESS_KEY_ID}",
  "aws_secret_key": "${AWS_SECRET_ACCESS_KEY}",
  "aws_region": "us-east-1",
  "vpc_id": "vpc-d5cd1",
  "subnet_id": "subnet-08d6b006", 
  "ami_name": "Pentaho-AMZN-{{isotime \"02-Jan-06 03_04_05\"}}",
  "instance_type": "m5.xlarge"
}

pen.sevrive.
[Unit]
Description=Pentaho Systemctl script
After=NetworkManager.service

[Service]
TimeoutStartSec=600
TimeoutStopSec=600
Type=forking
ExecStart=/home/pentaho/pentaho-server/start-pentaho.sh
ExecStop=/home/pentaho/pentaho-server/stop-pentaho.sh
ExecReload=/home/pentaho/pentaho-server/stop-pentaho.sh && /home/pentaho/pentaho-server/start-pentaho.sh
User=pentaho
Group=pentaho
[Install]
WantedBy=multi-user.target
